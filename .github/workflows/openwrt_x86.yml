#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-x86-build

on:
  # push:
  #   branches: 
  #     - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'
        type: choice
        options:
        - "true"
        - "false"

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-24.04
    environment: 
      name: x86
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      DEPENDENCIES: "build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget"
      REPO_BRANCH: main
      BUILD_ROOT: ${{ github.workspace }}
      CUSTOM_FEEDS_URL: ${{ secrets.CUSTOM_FEEDS_URL }}
      CUSTOM_CONFIG_URL: ${{ secrets.CUSTOM_CONFIG_URL}}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      TZ: Asia/Shanghai
      DEVICE_NAME: unknown
      FILE_DATE: unknown
      FIRMWARE: unknown
    steps:
      - name: Check environment
        run: |
          echo "TZ=$TZ"
          echo "DEPENDENCIES=$DEPENDENCIES"
          echo "BUILD_ROOT=$BUILD_ROOT"
          echo "CUSTOM_FEEDS_URL=$CUSTOM_FEEDS_URL"
          echo "CUSTOM_CONFIG_URL=$CUSTOM_CONFIG_URL"
          echo "DEVICE_NAME=$DEVICE_NAME"
          echo "FILE_DATE=$FILE_DATE"
          echo "FIRMWARE=$FIRMWARE"
        
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update && sudo apt-get -qq upgrade
          sudo apt-get -qq install $(cat $DEPENDENCIES)
          sudo apt-get -qq autoremove --purge
          sudo apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      - name: Maximize build disk space
        uses: easimon/maximize-build-space@master
        with:
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
      
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main


      - name: Start SSH via tmate
        uses: rdp-studio/ssh2actions@main
        if: github.event.inputs.ssh == 'true'

      - name: configure ssh
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Install mosdns
        run: |
          cd $BUILD_ROOT
          echo "src-git mosdns"
          rm -rf feeds/packages/net/v2ray-geodata
          git clone https://github.com/sbwml/luci-app-mosdns -b v5 package/mosdns
          git clone https://github.com/sbwml/v2ray-geodata package/v2ray-geodata
      
      - name: Install turboacc
        run: |
          echo "src-git turboacc"
          cd $BUILD_ROOT
          curl -sSL https://raw.githubusercontent.com/chenmozhijin/turboacc/luci/add_turboacc.sh -o add_turboacc.sh && bash add_turboacc.sh
      
      - name: my_private_data
        run: |
            git clone git@github.com:jsdfhasuh/openwrt_config.git $BUILD_ROOT/tmp

      - name: Install custom feeds and config
        run: |
            cd $BUILD_ROOT/tmp
            mv x86.config $BUILD_ROOT/.config
            cat $BUILD_ROOT/.config
            mv feeds.conf $BUILD_ROOT/feeds.conf
            cat $BUILD_ROOT/feeds.conf

      - name: Update feeds
        run: |
          $BUILD_ROOT/scripts/feeds update -a && $BUILD_ROOT/scripts/feeds install -a

      - name: Generate configuration file
        run: |
          cd $BUILD_ROOT
          cat .config

      - name: Make download
        run: |
          cd $BUILD_ROOT
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Build the firmware image
        id: compile
        run: |
          cd $BUILD_ROOT && echo "$(($(nproc)+1)) thread compile"
          IGNORE_ERRORS=m make -j$(($(nproc)+1)) defconfig download clean world || IGNORE_ERRORS=m make -j1 defconfig download clean world V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: ${{ env.BUILD_ROOT }}/bin

      - name: Organize files
        id: organize
        run: |
          cd $BUILD_ROOT/bin/targets/*/* && rm -rf packages
          { echo '### SHA256SUMS'; echo '```txt'; cat sha256sums; echo '```'; } > $BUILD_ROOT/SHA256SUMS
          echo "FIRMWARE=$PWD"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
 
      - name: Generate stable Release Tag
        id: stabletag
        run: |
          echo "release_tag=$(cd $BUILD_ROOT && git describe --tags --abbrev=0 --exact-match)_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Generate snapshot Release Tag
        id: snapshottag 
        run: |
          echo "release_tag=SNAPSHOT_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload stable firmware to Release
        uses: softprops/action-gh-release@master
        if: steps.stabletag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.stabletag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*
          body_path: ${{ env.BUILD_ROOT }}/SHA256SUMS

      - name: Upload snapshot firmware to Release
        uses: softprops/action-gh-release@master
        if: steps.snapshottag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.snapshottag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*
          body_path: ${{ env.BUILD_ROOT }}/SHA256SUMS

      - name: Delete workflow runs
        if: always()
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 30
          keep_minimum_runs: 5

      - name: Remove old Releases
        if: always()
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}